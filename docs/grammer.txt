Pylox grammer

expression     → literal
               | unary
               | binary
               | grouping ;

literal        → NUMBER | STRING | "true" | "false" | "nil" ;
grouping       → "(" expression ")" ;
unary          → ( "-" | "!" ) expression ;
binary         → expression operator expression ;
operator       → "==" | "!=" | "<" | "<=" | ">" | ">="
               | "+"  | "-"  | "*" | "/" ;


Precedence and Associativity

Precedence from lowest to highest in te table below.

Name           Operators       Associates
Comma           ,               Left
Ternary         ?:              Right
Equality        == !=           Left
Comparison      > >= < <=	    Left
Term	        - +	            Left
Factor	        / *	            Left
Unary	        ! -	            Right


Enhanced grammer (taking into account precedence and associativity) (eliminates prev.grammers's ambiguity)

Each rule here only matches expressions at its precedence level or higher.

program         -> declaration* EOF ;
declaration     -> class_decl | fun_decl | var_decl | statement ;
class_decl      -> "class" IDENTIFIER "{" function "}" ;
var_decl        -> "var" IDENTIFIER ( "=" expression )? ";" ;
fun_decl        -> "fun" function ;
function        -> IDENTIFIER "(" parameters? ")" block ;
parameters      -> IDENTIFIER ( "," IDENTIFIER )* ;
statement       -> expr_stmt | print_stmt | block | if_stmt | while_stmt | for_stmt | return_stmt;
return_stmt     -> "return" expression? ";" ;
for_stmt        -> "for" "(" ( var_decl | expr_stmt | ";" ) expression? ";" expression? ")" statement ;
while_stmt      -> "while" "(" expression ")" statement ;
if_stmt         -> "if" "(" expression ")" statement ( "else" statement )? ;
block           -> "{" declaration* "}" ;
expr_stmt       -> expression ";" ;
print_stmt      -> "print" expression ";" ;

expression      -> comma ;
comma           -> assignmment ( "," assignmment )* ;
assignmment     -> IDENTIFIER "=" assignmment | logic_or ;
logic_or        -> logic_and ( "or" logic_and )* ;
logic_and       -> ternary ( "and" ternary )* ;
ternary         -> equality ( "?" equality ":" ternary )* ;
equality        -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison      -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term            -> factor ( ( "-" | "+" ) factor )* ;
factor          -> factor ("/" | "*") unary | unary ; # left recursive not good for parsing technique to be used
factor          -> unary (("/" | "*") unary)* ;
unary           -> ("-" | "!") unary | call ;
unary           -> ("-" | "!" | "!=" | "==" | ">" | ">=" | "<" | "<=" |"/" | "*" | "+") unary | call; # error production for binaryy expr without left operand
call            -> primary ( "(" arguments? ")" )* ;
arguments       -> expression ( "," expression )* ;
primary         -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;


Scope Rule:
A variable usage refers to the preceding declaration with the same name in the innermost scope that encloses the expression where the variable is used.